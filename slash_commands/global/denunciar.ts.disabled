import Command from "../../classes/structs/Command";

const reportModel = require('../../models/reportModel')
import serverModel from '../../models/guildDataModel';
import discord from 'discord.js';
import {SlashCommandBuilder, PermissionFlagsBits} from 'discord.js';
export default new Command({
    command: new SlashCommandBuilder()
        .setName('denunciar')
        .setNameLocalizations({
            'en-US': 'report',
            'pt-BR': 'denunciar'
        })
        .setDescription('Comando para denunciar users na blacklotus')
        .setDescriptionLocalizations({
            'en-US': 'Command to report users in blacklotus',
            'pt-BR': 'Comando para denunciar users na blacklotus'
            })
        .addSubcommand(subcommand =>
            subcommand
                .setName('enviar')
                .setNameLocalizations({
                    'en-US': 'send',
                    'pt-BR': 'enviar'
                })
                .setDescription('Envie sua denuncia')
                .addIntegerOption(option => option.setName('grau').setMinValue(0).setMaxValue(5).setDescription('Nivel da denuncia').setRequired(true))
        )
        .addSubcommandGroup(
            group => group
                .setName('info')
                .setDescription('.')
                .addSubcommand(subcommand =>
                    subcommand
                        .setName('denuncia')
                        .setDescription('Informacões sobre uma denuncia')
                        .addStringOption(option =>
                            option
                                .setName('id')
                                .setDescription('Id da denuncia')
                                .setRequired(true)
                                .setAutocomplete(true)
                        )
                )
                .addSubcommand(subcommand =>
                    subcommand
                        .setName('user')
                        .setDescription('Informacões sobre um user')
                        .addStringOption(option =>
                            option
                                .setName('id')
                                .setDescription('Id do user')
                                .setRequired(true)
                        )
                )

        )
        .addSubcommandGroup(
            group => group
                .setName('configurar')
                .setDescription('.')
                .addSubcommand(subcommand =>
                    subcommand
                        .setName('autoban')
                        .setDescription('Defina um nivel de denuncia para os ids reportados serem banidos automaticamente')
                        .addIntegerOption(option =>
                            option
                                .setName('nivel')
                                .setMaxValue(5)
                                .setMinValue(0)
                                .setDescription('Nivel de denuncia minimo para banir automaticamente')
                                .setRequired(true)
                        )
                )
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    async run({client, interaction}) {
        if (!await serverModel.findOne({ id: interaction.guild.id })) return interaction.reply({ ephemeral: true, content: `Este commando é apenas para participantes da Black蓮` })
        if (!interaction.member.permissions.has(discord.PermissionFlagsBits.Administrator)) return interaction.reply({ ephemeral: true, content: `Comando apenas para administradores`})
        switch (interaction.options.getSubcommand()) {
            case 'enviar':
                const modal = new discord.ModalBuilder().setCustomId(`reportCreate-${interaction.member.id}-${interaction.guild.id}-${interaction.options.getInteger('grau')}`).setTitle('Criar report')
                const memberIds = new discord.TextInputBuilder().setCustomId('idInput').setLabel('Ids dos users reportados separados por linha').setStyle(2).setRequired(true)
                const razao = new discord.TextInputBuilder().setCustomId('reasonInput').setLabel('Razão do report').setStyle(2).setRequired(true)
                const provas = new discord.TextInputBuilder().setCustomId('proofInput').setLabel('Link para imagens de prova').setStyle(2).setRequired(true)
                const modalActionRow = new discord.ActionRowBuilder().addComponents([memberIds])
                const row2 = new discord.ActionRowBuilder().addComponents([razao])
                const row3 = new discord.ActionRowBuilder().addComponents([provas])
                modal.addComponents([modalActionRow, row2, row3])
                await interaction.showModal(modal)
                break;
            case 'denuncia':
                const reports = await reportModel.find()
                let id = interaction.options.getString('id')
                let report = await reportModel.findOne({ id: parseInt(id) })
                if (!report) report = reports.pop()
                if (!report) return interaction.reply({ ephemeral: true, content: `Infelizmente esse report foi deletado! Ou nunca existiu e você que digitou o id errado.. nunca saberemos` })
                let guild = client.guilds.cache.get(report.guildId)
                if (!guild) guild = {
                    name: `Não achei o servidor`
                }
                let user = await guild.members.fetch(report.userId).catch(() => {  })
                if (!user) user = {
                    user: { tag: `Não achei o user` }
                }
                let ids;
                if (report.reportedIds.length > 45) {
                    let id = report.reportedIds.slice(0, 44)
                    ids = id.join(', ') + "\nComo existiam mais de 45 ids alguns estão ocultos..."
                } else {
                    ids = report.reportedIds.join(', ')
                }
                let index = 0
                const embed = new discord.EmbedBuilder()
                    .setTitle(`Report de ${user.user.tag} (${guild.name})`)
                    .setFields([
                        {
                            name: `Razão:`,
                            value: report.reason
                        },
                        {
                          name: `Gravidade:`,
                            value: report.level.toString()
                        },
                        {
                            name: `Ids:`,
                            value: ids
                        }
                    ])
                    .setImage(report.images[index])
                    .setFooter({ text: `Imagem ${index + 1}/${report.images.length}` })
                    .setColor(`#ffffff`)
                const banIds = new discord.ButtonBuilder().setCustomId('banReport').setStyle(discord.ButtonStyle.Danger).setLabel('Banir ids reportados')
                const nextImg = new discord.ButtonBuilder().setCustomId('nextImg').setStyle(discord.ButtonStyle.Primary).setEmoji('▶️')
                const lastImg = new discord.ButtonBuilder().setCustomId('lastImg').setStyle(discord.ButtonStyle.Primary).setEmoji('◀️')
                let buttons = []
                if (report.images.length > 1) buttons.push(banIds, lastImg, nextImg)
                else buttons.push(banIds)
                const actionRow = new discord.ActionRowBuilder().setComponents(buttons)
                let reply = await interaction.reply({ ephemeral: true, components: [actionRow], embeds: [embed], fetchReply: true })
                let collector = reply.createMessageComponentCollector({ time: 50000})
                collector.on('collect', async i => {
                    switch (i.customId) {
                        case "banReport":
                            if (!interaction.guild.members.me.permissions.has(discord.PermissionFlagsBits.BanMembers)) {
                                await i.reply({
                                    ephemeral: true,
                                    content: `Eu não tenho permissão para banir membros! Verifique minhas permissões e tente novamente`
                                })
                                return
                            }
                            await i.reply({ ephemeral: true, content: `Banindo ${report.reportedIds.length} users... (Isso pode demorar um pouco)`})
                            for (id of report.reportedIds) {
                                await interaction.guild.bans.create(id, {reason: `User: ${interaction.member.user.tag} (Id do reporte em questão: ${report.id})` }).catch(() => {  })
                            }
                            await i.followUp({ephemeral: true, content: `Bani com sucesso todos membros reportados!`})
                            break;
                        case "lastImg":
                            index--
                            if (index < 0) {
                                index = report.images.length - 1
                            }
                            embed
                                .setImage(report.images[index])
                                .setFooter({ text: `Imagem ${index + 1}/${report.images.length}` })
                            i.update({ embeds: [embed] })
                            break;
                        case "nextImg":
                            index++
                            if (index + 1 > report.images.length) {
                                index = 0
                            }
                            embed
                                .setImage(report.images[index])
                                .setFooter({ text: `Imagem ${index + 1}/${report.images.length}` })
                            i.update({ embeds: [embed] })
                            break;
                        default:
                            break;
                    }
                })
                collector.on('end', () => {
                    reply.edit({ components: [] }).catch(() => {  })

                })
                break;
            case 'user':
                const userId = interaction.options.getString('id')
                const data = await reportModel.find({ reportedIds: userId})
                if (!data) return interaction.reply({ ephemeral: true, content: `Esse user não foi reportado!`})
                const guilds = []
                for (const report of data) {
                    const guild = client.guilds.cache.get(report.guildId)
                    guilds.push(guild)
                }
                const user2 = await client.users.fetch(userId)
                if (!user2) return interaction.reply({ ephemeral: true, content: `Esse user não existe mais!`})
                const fields = [
                    {
                        name: `Informações do User:`,
                        value: `ID: ${user2.id}\nTag: ${user2.tag}\nAvatar: [Clique aqui](${user2.avatarURL()})`,
                        inline: true
                    },
                    {
                        name: `Informações de reportes:`,
                        value: `Reportado ${data.length} vez${data.length > 1 ? 'es!' : ''}\nServidores que Reportaram: ${guilds.map(g => g.name).join(', ')}\nGrau médio dos reportes: **${data.map(r => r.level).reduce((a, b) => a + b) / data.length}**`,
                        inline: true
                    }
                ]
                const embed2 = new discord.EmbedBuilder()
                    .setTitle(`Report${data.length > 1?'s':''} de ${user2.tag}`)
                    .setThumbnail(user2.avatarURL({ dynamic: true }))
                    .setFields(fields)
                    .setColor(`#ffffff`)
                interaction.reply({ ephemeral: true, embeds: [embed2] })
                break;
            case 'autoban':
                const autoBanLevel = interaction.options.getInteger('nivel')
                const guildData = await client.guildManager.fetch(interaction.guild.id)
                if (!guildData) return interaction.reply({ ephemeral: true, content: `Esse servidor não faz parte da Black Lótus!`})
                guildData.data.configs.autoBanLevel = autoBanLevel
                await guildData.data.save()
                interaction.reply({ ephemeral: true, content: `Defini o nível de reporte para ban automático para ${autoBanLevel}!\nAgora, quando um user for reportado com um nível maior ou igual a esse, ele será banido automaticamente!`})
                break;
            default:
                break;
        }
    },
    async autocomplete({interaction}) {
        let reports = await reportModel.find({}).limit(25)
        reports = reports.filter(r => r.id.toString().startsWith(interaction.options.getString('id') || ''))
        const options = []
        reports.forEach(report => {
            options.push({ name: `${report.id} - Gravidade: ${report.level}`, value: report.id.toString() })
        })
        await interaction.respond(options)
    }
})